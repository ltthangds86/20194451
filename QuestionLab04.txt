1.
- Which classes are aggregates of other classes?
ANSWER:
Store class is the aggregation of Media class
Cart class is the aggregation of Media class
CompactDisc class is the aggregation of Track class
- Checking all constructors of whole classes if they initialize for their parts?
ANSWER:
public CompactDisc(String title,String category,String director,float cost,String artist,ArrayList<Track> tracks)

2.
- What class should implement the Comparable interface?
ANSWER: Media
- In those classes, how should you implement the compareTo()method be to reflect the ordering that we
want?
ANSWER:
returns < 0 then the parameter calling the method is stand in front. (phần tử hiện tại < phần tử khác )
returns == 0 then the two parameters are equivalent. (phần tử hiện tại = phần tử khác)
returns > 0 then the parameter passed to the Java compareTo() method is stand in front.(phần tử hiện tại > phần tử khác)
=> We can follow above convention to modify method to sort in our ordering result.

- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
ANSWER:
No, we can't. Assume Media class implements Comparable interface, Media class can only override method compareTo once time
=> we must modify code of compareTo method to sort in another ordering result.

- Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing
length, then cost. How would you modify your code to allow this?
ANSWER:
public int compareTo(Media dvd) {
		// TODO Auto-generated method stub
		if (!(dvd instanceof DigitalVideoDisc)){
			return super.compareTo(dvd);
		}
		DigitalVideoDisc dvd1 =  (DigitalVideoDisc) dvd;
		if (this.getTitle().toLowerCase().compareTo(dvd1.getTitle().toLowerCase())> 0) {
			return 1;
		}
		else if (this.getTitle().toLowerCase().compareTo(dvd1.getTitle().toLowerCase()) < 0) {
			return -1;
		}
		else {
			if (this.getLength() > dvd1.getLength()) {
				return -1;
			}
			else if (this.getLength() < dvd1.getLength()) {
				return 1;
			}
			else {
				if (this.getCost() > dvd1.getCost()) {
					return -1;
				}
				else if (this.getCost() < dvd1.getCost()) {
					return 1;
				}
				else return 0;
			}
		}
	}